<?php
namespace Drupal\activit\CalculatorController;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormState;
use \Drupal\Core\Form\FormStateInterface;

class CalculatorController extends FormBase{
  //SIMPLE CALCULATOR
  public function getFormId(): string
  {
    /**
     *{@inheritdoc}
     */
    // TODO: Implement getFormId() method. //подставил PhpStorm
    return 'drupal_calculator';
  }

  /**
   *{@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state): array
  {
    // TODO: Implement buildForm() method.
    //поле для вывода нашего результата
    $form['massage'] = [
      '#type' => 'markup',
      '#markup' => '<div class="result_message"></div>',
    ];
    //first number
    $form['number_1'] = [
      '#type' => 'textfield',
      '#title' => $this->t('First number'),
      '#description' => 'Please enter first number',
      '#required' => TRUE,
      '#attributes' => [
        'class' => [
          'n1-val',
          'test-class'
        ]
      ]
    ];
    //second number
    $form['number_2'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Second number'),
      '#description' => 'Please enter first number',
      '#required' => TRUE
    ];
    //select operation
    $form['operation'] = [
      '#type' => 'select',
      '#title' => $this->t('Operation'),
      '#options' => [
        '+' => '+',
        '-' => '-',
        '*' => '*',
        '/' => '/'
      ],
    ];
    /*
    $form['submit'] = [
      '#type' => 'submit',
      '#value' => $this->t('Calculate'),
    ];
    */ //submit button
    //кнопка + действие ajax
    $form['actions'] = [
      '#type' => 'button',
      '#value' => $this->t('Calculate'),
      //'#validate' => array('validateForm'),
      '#ajax' => [
        'callback' => '::setMessage',
      ]
    ];
    //$form['actions']['#validate'] = array('validateForm');
    return $form;
  }
  /*public function validateForm(array &$form, FormStateInterface $form_state)
  {
    //parent::validateForm($form, $form_state); // TODO: Change the autogenerated stub
    if (!is_numeric($form_state->getValue('number_1'))){
      $form_state->setErrorByName(
        'number_1',
        $this->t('Only numbers')
      );
    }
  }
  */ //validation
  public function setMessage(array &$form, FormStateInterface $form_state): AjaxResponse
  {
    $n1 = $form_state->getValue('number_1');
    $n2 = $form_state->getValue('number_2');
    $operation = $form_state->getValue('operation');

    $response = new AjaxResponse();

    //validation
    if (is_numeric($n1) && (is_numeric($n2))){
      if ($operation == '/' && $n2 == '0'){
        $result = 'Error! На ноль делить нельзя!';
      }
      else{
        $result = $this->get_result($n1, $n2, $operation);
      }
    }
    else{
      $result = 'Error! Only Numbers!';
    }

    $response->addCommand(
      new HtmlCommand(
        '.result_message',
        '<div class="my_top_message">' . $this->t('Result: @result', [
          '@result' => ($result)
        ])
      )
    );

    return $response;
  }
  //submit function ()
  public function submitForm(array &$form, FormStateInterface $form_state)
  {
    /**
     *{@inheritdoc}
     */
    // TODO: Implement submitForm() method.
    //переменные
    //$this->messenger()->addMessage($result);
    //$this->messenger()->addMessage($form_state->getValue('number_1') + $form_state->getValue('number_2'));
    //drupal_set_message($form_state->getValue('number_1') + $form_state->getValue('number_1'));
  }

  public function get_result($num_1, $num_2, $operation): float|int|null
  {
    //return result
    return match ($operation) {
      '+' => $num_1 + $num_2,
      '-' => $num_1 - $num_2,
      '*' => $num_1 * $num_2,
      '/' => $num_1 / $num_2,
      default => null,
    };
  }
}
